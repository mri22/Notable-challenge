import sys
sys.path.append('../')
import json
from models.Doctor import Doctor
from models.Appointment import Appointment

class Controller:
	NEW_PATIENT = 'new_patient'
	FOLLOW_UP = 'follow_up'

	def __init__(self):
		self.doctors_lst = [ Doctor(0, 'John', 'Doe'),
			Doctor(1, 'Mark', 'Zuck'),
			Doctor(2, 'Jake', 'Mandela'),
			Doctor(3, 'Peter', 'Manuel'),
			Doctor(4, 'Chris', 'Tucker')]

		self.appointments_map = {
			0 : [Appointment(100, 'Zack', 'Levine', '07/20/2020', '07:15', self.NEW_PATIENT),
				Appointment(102, 'Mark', 'Levine', '06/12/2020', '15:00', self.FOLLOW_UP),
				Appointment(111, 'Zack', 'Levine', '09/01/2020', '08:45', self.NEW_PATIENT)],
			1 : [Appointment(101, 'Obama', 'Barack', '04/20/2020', '23:30', self.FOLLOW_UP)],
			2 : [Appointment(104, 'Patrick', 'Star', '01/13/2021', '03:15', self.NEW_PATIENT),
				Appointment(106, 'Becky', 'John', '03/04/2020', '18:00', self.NEW_PATIENT),
				Appointment(105, 'Zhao', 'Shen', '11/07/2020', '07:15', self.NEW_PATIENT),
				Appointment(107, 'Becky', 'John', '11/07/2020', '07:15', self.FOLLOW_UP),
				Appointment(108, 'Pat', 'Bev', '11/07/2020', '07:15', self.FOLLOW_UP)],
			3 : [],
			4 : [Appointment(109, 'Arun', 'Pat', '12/05/2020', '10:30', self.FOLLOW_UP),
				Appointment(110, 'Steve', 'Mcqueen', '12/10/2020', '02:00', self.NEW_PATIENT)]}

		self.cur_max_app_id = 111

	def getDocs(self):
		serilzable_lst = []
		for doc in self.doctors_lst:
			doc_map = {'doctor_id' : doc.get_doctor_id(), 'first_name': doc.get_first_name(), 'last_name' : doc.get_last_name()}
			serilzable_lst.append(doc_map)

		return serilzable_lst

	def getDocApps(self, doc_id, date):
		if doc_id not in self.appointments_map:
			return 'No such doctor exists in db'

		appointments = [app for app in self.appointments_map[doc_id] if app.get_date() == date]

		if appointments == []:
			return 'No appointments found at date: ' + date + ' for doctor id: ' + str(doc_id)

		serilzable_lst = []
		for app in appointments:
			app_map = {'app_id' : app.get_appointment_id(), 'doctor_id' : doc_id,
			'patient_first_name': app.get_patient_first_name(),
			'patient_last_name': app.get_patient_last_name(),
			'date' : app.get_date(),
			'time' : app.get_time(),
			'kind' : app.get_kind()}
			serilzable_lst.append(app_map)

		return serilzable_lst

	def deleteDocAppointment(self, doc_id, app_id):
		if (doc_id not in self.appointments_map):
			return 'No such doctor exits'

		for i in range(len(self.appointments_map[doc_id])):
			if self.appointments_map[doc_id][i].get_appointment_id() == app_id:
				self.appointments_map[doc_id].pop(i)
				return 'removed appointment with id: ' + str(app_id) + ' successfully!'

		return 'Appointment with id: ' + str(app_id) + ' not found.'

	def addAppointment(self, doc_id, p_first_name, p_last_name, date, time, kind):
		if (doc_id not in self.appointments_map):
			return 'No such doctor exits\n'

		if (not self.isValidTime(time)):
			return 'Invalid time, Please put the time with appropriate format and try again!'

		correct_time = self.getAppointmentTime(time)
		num_apps = self.numAppointments(self.appointments_map[doc_id], date, correct_time)
		if (num_apps == 3):
			return 'Doctor is busy at this time, please choose another time'

		self.cur_max_app_id += 1
		app_id = self.cur_max_app_id # The appointment id should be generated by db or random int
		new_app = Appointment(app_id, p_first_name, p_last_name, date, correct_time, kind)

		self.appointments_map[doc_id].append(new_app)

		app_map = {'app_id' : new_app.get_appointment_id(), 'doctor_id' : doc_id,
			'patient_first_name': new_app.get_patient_first_name(),
			'patient_last_name': new_app.get_patient_last_name(),
			'date' : new_app.get_date(),
			'time' : correct_time,
			'kind' : new_app.get_kind()}

		return app_map

	def isValidTime(self, time):
		try:
			time_spliced = time.split(':')
			hours = int(time_spliced[0])
			minutes = int(time_spliced[1])
			if hours not in range(0, 24) or minutes not in range(0, 60):
				return False

			return True
		except:
			return False

	def getAppointmentTime(self, time):
		time_spliced = time.split(':')
		hours = int(time_spliced[0])
		minutes = int(time_spliced[1])
		interval = (minutes % 15)
		minutes -= interval

		if 0 <= hours < 10:
			hours = '0' + str(hours)
		if 0 <= minutes < 10:
			minutes = '0' + str(minutes)
		return str(hours) + ':' + str(minutes)

	def numAppointments(self, apps_lst, date, time):
		count = 0
		for app in apps_lst:
			if app.get_date() == date and app.get_time() == time:
				count += 1

		return count
